
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-static
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-00566f459d396b80e  ##Repalce with your FS ID
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-static
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  volumeName: efs-static
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: efs-static-pod
  labels:
    demo: efs-static
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: nginx-data
      mountPath: /usr/share/nginx/html
  nodeSelector:
    zone: 1f
  volumes:
  - name: nginx-data
    persistentVolumeClaim:
      claimName: efs-static ##pvc will get data form PV
---
apiVersion: v1
kind: Service
metadata:
  name: efs-static
spec:
  type: LoadBalancer
  selector:
    demo: efs-static
  ports:
  - protocol: TCP
    port: 80 #service-port
    targetPort: 80 #container-port



## Create an EFS filesystem with eks cluster VPC it will create one SG automatically
## To connect worker nodes to EFS we have to edit the EFS SG. add workernode SG in EFS inboud allowing NFS-2049 port.
## Assign EFS full access role to workernode
## Install EFS-csi drivers in workstation
## kubectl kustomize \
#   "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/ecr/?ref=release-1.7" > private-ecr-driver.yaml
## After installing the drivers we can see private-ecr-driver.yaml
## kubectl apply -f private-ecr-driver.yaml
## Create pv and pvc

## kubectl get nodes
## kubectl get nodes --show-labels
## Based on the worker nodes AZ assign lables 
## kubectl label nodes <node_name> zone=1a